<% content_for :head do %>
  <meta name="turbo-cache-control" content="no-cache">
<% end %>

<%= render 'shared/navbar_app' %>
<div class="analysis-container-premium">
  <div class="analysis-card-premium" data-controller="show" data-provider="<%= @analysis.ai_provider %>">

    <!-- Header unifi√© avec partage -->
    <div class="analysis-header-premium">
      <div class="analysis-meta">
        <h1 class="analysis-title-premium"><%= @analysis.title %></h1>
        <div class="analysis-badges">
          <span class="lang-badge-premium"><%= @analysis.language %></span>
          <% if @analysis.ai_provider == "claude" %>
            <span class="provider-badge-premium claude">‚ö° Claude (Expert)</span>
          <% elsif @analysis.ai_provider == "tests" %>
            <span class="provider-badge-premium tests">üìã Tests Automatiques</span>
          <% elsif @analysis.ai_provider == "improve" %>
            <span class="provider-badge-premium improve">‚ú® Am√©lioration Auto</span>
          <% elsif @analysis.ai_provider == "smells" %>
            <span class="provider-badge-premium smells">üëÉ Code Smells</span>
          <% else %>
            <span class="provider-badge-premium openai">ü§ñ OpenAI (Standard)</span>
          <% end %>
        </div>
      </div>
      
      <!-- Bouton partage -->
<div class="dropdown-container-premium" data-controller="dropdown">
  <button class="btn-share-premium" data-action="click->dropdown#toggle">
    <i class="fas fa-share"></i>
    <span>Partager</span>
    <i class="fas fa-chevron-down dropdown-chevron"></i>
  </button>

  <div class="dropdown-menu-premium" data-dropdown-target="menu">
    <button class="dropdown-item-premium"
            data-action="click->show#copyUrl click->dropdown#toggle"
            data-analysis-url="<%= analysis_url(@analysis) %>">
      <i class="fas fa-copy"></i>
      <span>Copier le lien</span>
    </button>

    <button class="dropdown-item-premium"
            data-action="click->show#downloadPdf click->dropdown#toggle"
            data-analysis-id="<%= @analysis.id %>">
      <i class="fas fa-file-pdf"></i>
      <span>T√©l√©charger PDF</span>
    </button>
  </div>
</div>
</div>

    <!-- Score (hero + d√©tails) -->
    <% if @analysis.ai_provider.in?(["openai","claude","smells"]) && @score.present? %>
      <%
        score       = (@score || 0).to_f
        ring_r      = 50
        ring_c      = (2 * Math::PI * ring_r)
        ring_offset = ring_c * (1 - score / 10.0)
        tier = case score
               when 8..10 then 'good'
               when 6..7  then 'ok'
               else              'bad'
               end
        grad = case tier
               when 'good' then { start: '#34d399', stop: '#10b981' }
               when 'ok'   then { start: '#fbbf24', stop: '#f59e0b' }
               else              { start: '#f87171', stop: '#ef4444' }
               end
      %>

      <div class="score-section-premium">
        <div class="score-row-premium">
          <div class="ring-premium" role="img" aria-label="Score global <%= score.to_i %> sur 10">
            <svg viewBox="0 0 120 120" width="120" height="120" class="ring-svg" aria-hidden="true">
              <defs>
                <linearGradient id="ringGrad-<%= @analysis.id %>" x1="0%" y1="0%" x2="100%" y2="0%">
                  <stop offset="0%"   stop-color="<%= grad[:start] %>" />
                  <stop offset="100%" stop-color="<%= grad[:stop] %>" />
                </linearGradient>
              </defs>

              <!-- fond -->
              <circle class="ring-bg" cx="60" cy="60" r="<%= ring_r %>" />

              <!-- progr√®s -->
              <circle
                class="ring-progress tier-<%= tier %>"
                cx="60" cy="60" r="<%= ring_r %>"
                style="stroke-dasharray:<%= ring_c %>px; stroke-dashoffset:<%= ring_offset %>px;"
              />

              <!-- sheen -->
              <circle
                class="ring-sheen"
                cx="60" cy="60" r="<%= ring_r %>"
                style="stroke-dasharray: 12 <%= ring_c %>px;"
                stroke="url(#ringGrad-<%= @analysis.id %>)"
              />
            </svg>

            <div class="ring-center">
              <div class="ring-score"><%= (score % 1 == 0) ? score.to_i : ('%.1f' % score) %></div>
              <div class="ring-denom">/10</div>
            </div>
          </div>

          <div class="score-meta-premium">
            <div class="score-meta-title">Score global</div>
            <div class="score-meta-text">
              <%= case score
                  when 8..10 then "Code excellent, tr√®s peu d'actions requises."
                  when 6..7  then "Ton code est globalement bon, quelques am√©liorations possibles."
                  when 4..5  then "Code correct mais perfectible ‚Äî prioriser quelques corrections."
                  else             "Attention : plusieurs am√©liorations importantes sont n√©cessaires."
                  end %>
            </div>
          </div>
        </div>

        <% if @scores.present? %>
          <div class="scores-stack-premium" role="group" aria-label="Scores d√©taill√©s">
            <% sections = {
              security:    { label: "S√©curit√©",    icon: "fa-shield-halved", key: :security    },
              performance: { label: "Performance", icon: "fa-gauge-high",    key: :performance },
              readability: { label: "Lisibilit√©",  icon: "fa-bezier-curve",  key: :readability },
              testing:     { label: "Tests",       icon: "fa-flask-vial",    key: :testing     }
            } %>

            <% sections.each do |slug, h| %>
              <%
                s   = (@scores[h[:key]] || 0).to_f
                pct = [[(s * 10).to_i, 0].max, 100].min
                tier_s = case s
                         when 8..10 then 'good'
                         when 6..7  then 'ok'
                         else              'bad'
                         end
              %>
              <div class="stack-item">
                <div class="stack-label">
                  <i class="fa-solid <%= h[:icon] %>"></i>
                    <span><%= h[:label] %></span>
                </div>
                <div class="stack-bar" role="progressbar"
     aria-valuenow="<%= s.to_i %>" aria-valuemin="0" aria-valuemax="10">
                  <span class="stack-bar-fill stack-tier-<%= tier_s %>" style="width:<%= pct %>%"></span>
                </div>
                <div class="stack-value" aria-label="<%= h[:label] %> <%= s.to_i %> sur 10">
                  <%= s.to_i %>/10
                </div>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    <% end %>

    <!-- Code collapsible -->
    <div class="code-section-premium">
      <button class="code-toggle-premium" data-action="click->show#toggleCode">
        <i class="fas fa-code code-icon"></i>
        <span>Code analys√©</span>
        <i class="fas fa-chevron-down code-chevron"></i>
      </button>
      <div class="code-content-premium" style="display: none;">
        <pre class="code-block line-numbers">
<code class="language-<%= @analysis.language.downcase %>"><%= @analysis.code %></code></pre>
      </div>
    </div>

    <!-- Feedback Section -->
    <% if @analysis.ai_feedback.present? %>
      <% parsed = @parsed || parse_ai_feedback(@analysis.ai_feedback) %>

      <div class="feedback-section-premium">
        <% unless @analysis.ai_provider == "tests" %>
          <h3 class="feedback-title-premium">
            <% if @analysis.ai_provider == "improve" %>
              ü§ñ Retour de l'agent QA
            <% elsif @analysis.ai_provider == "smells" %>
              ü§ñ Retour de l'agent QA
            <% else %>
              ü§ñ Retour de l'agent QA
            <% end %>
          </h3>
        <% end %>

<% if @analysis.ai_provider == "tests" %>
  <%
    # On parse le JSON stock√© dans ai_feedback.
    # Le 'rescue' est notre filet de s√©curit√© : si le JSON est malform√©, la page ne crashe pas.
    begin
      tf = JSON.parse(@analysis.ai_feedback)
    rescue JSON::ParserError
      # Si le parsing √©choue, on cr√©e un objet d'erreur pour l'afficher proprement.
      tf = { 
        "error" => "Le retour de l'IA n'est pas un JSON valide.", 
        "raw_feedback" => @analysis.ai_feedback 
      }
    end
  %>

  <%# CAS 1 : On a une erreur (soit du contr√¥leur, soit du parsing) %>
  <% if tf['error'] %>
    <div class="error-section-premium" style="padding:0; border:none;">
      <div class="error-content-premium">
        <h3 class="error-title-premium">‚ö†Ô∏è Erreur lors de l'analyse des tests</h3>
        <p><%= tf['error'] %></p>
        <% if tf['raw_feedback'] %>
          <p><strong>Retour brut de l'IA :</strong></p>
          <pre><code><%= tf['raw_feedback'] %></code></pre>
        <% end %>
      </div>
    </div>

  <%# CAS 2 : Tout va bien, on affiche les donn√©es du JSON de mani√®re fiable %>
  <% else %>
    <div class="tests-wrap-premium">
      <!-- Chip Framework -->
      <% if tf['framework'].present? %>
        <div class="tests-chips">
          <span class="chip chip-soft-violet">
            <i class="fa-solid fa-wrench"></i>
            <strong>Framework :</strong>&nbsp;<%= tf['framework'] %>
          </span>
        </div>
      <% end %>

      <!-- Grid 2 colonnes : Sc√©narios + Instructions/Pr√©requis -->
      <div class="tests-info-grid">
        <!-- Colonne 1: Sc√©narios test√©s -->
        <% if tf['scenarios'].present? && tf['scenarios'].any? %>
          <div class="tests-block">
            <div class="tests-block-title">üéØ Sc√©narios test√©s</div>
            <ul class="tests-list">
              <% tf['scenarios'].each do |scenario| %>
                <li>
                  <i class="fa-regular fa-square-check"></i>
                  <span><%= scenario %></span>
                </li>
              <% end %>
            </ul>
          </div>
        <% end %>

        <!-- Colonne 2: Instructions & Pr√©requis -->
        <div class="tests-block">
          <% if tf['executionInstructions'].present? %>
            <div class="tests-block-title">üìö Instructions d'ex√©cution</div>
            <div class="tests-instructions-body exec-steps">
              <%= markdown(tf['executionInstructions']) %>
            </div>
          <% end %>
          <% if tf['prerequisites'].present? && tf['prerequisites'].any? %>
            <div class="tests-block-title" style="margin-top: 1.5rem;">‚öôÔ∏è Pr√©requis</div>
            <ul class="tests-list" style="gap: 0.25rem;">
              <% tf['prerequisites'].each do |prereq| %>
                <li>
                  <i class="fa-solid fa-check-double" style="font-size: 0.8em;"></i>
                  <span><%= prereq %></span>
                </li>
              <% end %>
            </ul>
          </div>
        <% end %>
        </div>
      </div>

      <!-- Code des tests - Pleine largeur en dessous -->
      <% if tf['testCode'].present? %>
        <% lang_for_tests = @analysis.language.downcase %>
        <div class="tests-code-block">
          <div class="tests-block-title">üíª Code des tests</div>
          <pre class="code-block line-numbers"><code class="language-<%= lang_for_tests %>"><%= tf['testCode'] %></code></pre>
        </div>
      <% end %>

      <!-- Notes importantes (un seul endroit, en bas) -->
      <% if tf['importantNotes'].present? && tf['importantNotes'].any? %>
        <div class="tests-note">
          <div class="tests-note-icon">‚ÑπÔ∏è</div>
          <div class="tests-note-body">
            <ul style="margin:0; padding-left: 1.25rem;">
              <% tf['importantNotes'].each do |note| %>
                <li><%= note %></li>
              <% end %>
            </ul>
          </div>
        </div>
      <% end %>
    </div>
  <% end %>



        <% elsif @analysis.ai_provider.in?(["openai","claude","smells","improve"]) && parsed[:sections].present? %>
          <!-- Version structur√©e : cartes avec traitement sp√©cial code smells -->
          <div class="feedback-grid-premium">
            <% order = [
              [:resume,      ["R√©sum√© global", "fa-file-lines",   "",       "feedback-span-2"]],
              [:security,    ["S√©curit√©",      "fa-shield-halved","sec",    ""]],
              [:performance, ["Performance",   "fa-gauge-high",   "perf",   ""]],
              [:readability, ["Lisibilit√©",    "fa-bezier-curve", "read",   ""]],
              [:tests,       ["Tests",         "fa-flask-vial",   "tests",  ""]]
            ] %>

            <% order.each do |key, (label, icon, tone, extra_class)| %>
              <% next unless parsed[:sections][key] %>
              <% next if key == :resume && @analysis.ai_provider == "smells" %>
              
              <% body = parsed[:sections][key][:body] %>
    <% if key == :tests && @analysis.ai_provider.in?(["openai", "claude"]) %>
  <% body = body.gsub(/üéØ\s*Pistes d'am√©lioration[\s\S]*$/mi, '').strip %>
<% end %>
              <% score = parsed[:sections][key][:score] %>
              
              <%# TRAITEMENT SP√âCIAL POUR CODE SMELLS ET IMPROVE %>
              <% if @analysis.ai_provider == "smells" %>
                <% body = process_smells_content(body, key) %>
              <% elsif @analysis.ai_provider == "improve" %>
                <% body = body %>
              <% end %>
              
              <% score ||= @scores[:security]    if key == :security %>
              <% score ||= @scores[:performance] if key == :performance %>
              <% score ||= @scores[:readability] if key == :readability %>
              <% score ||= @scores[:testing]     if key == :tests %>

              <% card_classes = ["feedback-card-premium"] %>
              <% card_classes << extra_class if extra_class.present? %>

              <div class="<%= card_classes.join(' ') %>">
                <div class="feedback-card-header">
                  <span class="feedback-title-left">
                    <i class="fa-solid <%= icon %> feedback-icon <%= tone %>"></i>
                    <span><%= label %></span>
                  </span>
                  <% if score.present? %>
                    <span class="feedback-score-chip"><%= score %>/10</span>
                  <% end %>
                </div>
                <div class="feedback-body-premium">
                  <%= simple_format(body.gsub(/\*\*/, ''), {}, wrapper_tag: "div") %>
                </div>
              </div>
            <% end %>
          </div>

          <!-- Section d√©di√©e Code Smells - D√©tails complets -->
          <% if @analysis.ai_provider == "smells" %>
            <div style="margin-top: 2rem;">
              <div class="feedback-content-premium">
                <% 
                  # Afficher seulement la partie d√©tails des code smells
                  smells_details = @analysis.ai_feedback.dup
                  # Garder seulement √† partir de "Code Smells d√©tect√©s"
                  if match = smells_details.match(/(üëÉ.*?Code Smells d√©tect√©s.*)/mi)
                    smells_content = match[1]
                    # Enlever les redondances en d√©but mais garder tous les d√©tails
                    smells_content.gsub!(/^üìä\s*Score\s*[:Ôºö].*?\n/mi, "")
                    smells_content.gsub!(/^\[.*?\]\s*\n/mi, "")
                %>
                <%= simple_format(smells_content, {}, wrapper_tag: "div") %>
                <% end %>
              </div>
            </div>
          <% end %>

        <% else %>
          <!-- Fallback non structur√© -->
          <div class="feedback-content-premium">
            <% content = @analysis.ai_feedback.to_s.strip %>
            <% if @analysis.ai_provider == "improve" %>
              <% content = clean_improve_feedback(content) %>
            <% end %>
            <%= simple_format(content, {}, wrapper_tag: "div") %>
          </div>
        <% end %>
      </div>

      <!-- Section Pistes d'am√©lioration (Rapide/Expert uniquement) - S√âPAR√âE -->
      <% if @analysis.ai_provider.in?(["openai","claude"]) %>
<% 
# Extraction des pistes d'am√©lioration - VERSION CORRIG√âE
pistes_match = @analysis.ai_feedback.match(/üéØ\s*Pistes d'am√©lioration\s*:\s*(.*?)‚è±Ô∏è/m)
pistes_text = pistes_match ? pistes_match[1].strip : nil

# Si pas trouv√© avec ‚è±Ô∏è, essayer sans (fallback)
if pistes_text.blank?
  pistes_match = @analysis.ai_feedback.match(/üéØ\s*Pistes d'am√©lioration\s*:\s*(.*)$/m)
  pistes_text = pistes_match ? pistes_match[1].strip : nil
end
      
# Extraction du temps estim√©
temps_match = @analysis.ai_feedback.match(/‚è±Ô∏è\s*\*?\*?Temps estim√©.*?\*?\*?\s*:?\s*([^\n]+)/i)
temps_estime = temps_match ? temps_match[1].strip : nil
%>

<% if pistes_text.present? %>
  <div class="correction-section-premium">
    <h3 class="correction-title-premium">üéØ Pistes d'am√©lioration</h3>
    
    <div class="pistes-content-premium">
      <% 
        sections = []
        
        # Chercher "Points critiques"
        if match = pistes_text.match(/\*\*Points critiques\*\*[^\n]*\n(.+?)(?=\n\s*\*\*Am√©liorations)/m)
          sections << {
            title: "Points critiques",
            content: match[1].strip,
            css_class: "pistes-critiques"
          }
        end
        
        # Chercher "Am√©liorations recommand√©es"
        if match = pistes_text.match(/\*\*Am√©liorations recommand√©es\*\*[^\n]*\n(.*)$/m)
          sections << {
            title: "Am√©liorations recommand√©es",
            content: match[1].strip,
            css_class: "pistes-importantes"
          }
        end
                
        # Fallback
        if sections.empty?
          sections << {
            title: nil,
            content: pistes_text,
            css_class: "pistes-conseils"
          }
        end
      %>
      
      <% sections.each do |section| %>
        <% if section[:title].present? %>
          <div class="pistes-section-title"><%= section[:title] %></div>
        <% end %>
        <div class="<%= section[:css_class] %>">
          <%= markdown(section[:content]) %>
        </div>
      <% end %>
      
      <% if temps_estime.present? %>
        <div class="pistes-temps">
          <strong>‚è±Ô∏è Temps estim√© :</strong> <%= temps_estime %>
        </div>
      <% end %>
    </div>
  </div>
<% end %>
<% end %>

      <!-- Card "Code refactoris√©" (mode improve) -->
<% if @analysis.ai_provider == "improve" %>
  <% ref_lang = (@analysis.ai_feedback[/```([a-zA-Z]+)/, 1] || @analysis.language).downcase %>
  <% ref_code = @analysis.ai_feedback[/üíª.*?Code refactoris√©.*?```[a-zA-Z]*\n(.*?)(?:```|\z)/m, 1] %>  <%# CHANGE ICI %>
  <% if ref_code.present? %>
    <div class="correction-section-premium">
      <h3 class="correction-title-premium">üíª Code refactoris√©</h3>
      <div class="code-card">
        <pre class="code-block line-numbers"><code class="language-<%= ref_lang %>"><%= ref_code %></code></pre>
      </div>
    </div>
  <% end %>
<% end %>

    <% else %>
      <!-- Error Section -->
      <div class="error-section-premium">
        <div class="error-content-premium">
          <h3 class="error-title-premium">‚ö†Ô∏è Analyse √©chou√©e</h3>
          <p>L'analyse IA n'a pas pu √™tre effectu√©e. Cela peut √™tre d√ª √† :</p>
          <ul>
            <li>Fichier trop volumineux (> 1000 lignes)</li>
            <li>Probl√®me de connexion √† l'API</li>
            <li>Timeout de l'API</li>
            <li>Code dans un format non reconnu</li>
          </ul>
          <p><strong>Solution :</strong> Essayez avec un fichier plus petit ou collez directement le code.</p>
        </div>
      </div>
    <% end %>

    <!-- Navigation Buttons -->
    <div class="navigation-premium">
      <%= link_to "Nouvelle analyse", new_analysis_path, class: "btn-primary-premium" %>
      <%= link_to "Voir toutes les analyses", analyses_path, class: "btn-secondary-premium" %>
    </div>

  </div>
</div>