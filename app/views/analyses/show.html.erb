<div class="analysis-container-premium">
  <div class="analysis-card-premium">
    
    <!-- Header unifié avec partage -->
    <div class="analysis-header-premium">
      <div class="analysis-meta">
        <h1 class="analysis-title-premium"><%= @analysis.title %></h1>
        <div class="analysis-badges">
          <span class="lang-badge-premium"><%= @analysis.language %></span>
          <% if @analysis.ai_provider == "claude" %>
            <span class="provider-badge-premium claude">⚡ Claude (Expert)</span>
          <% elsif @analysis.ai_provider == "tests" %>
            <span class="provider-badge-premium tests">📋 Tests Automatiques</span>
          <% elsif @analysis.ai_provider == "improve" %>
            <span class="provider-badge-premium improve">✨ Amélioration Auto</span>
          <% elsif @analysis.ai_provider == "smells" %>
            <span class="provider-badge-premium smells">👃 Code Smells</span>
          <% else %>
            <span class="provider-badge-premium openai">🤖 OpenAI (Standard)</span>
          <% end %>
        </div>
      </div>
      
      <!-- Bouton partage -->
      <div class="dropdown-container-premium" data-dropdown>
        <button class="btn-share-premium" data-dropdown-trigger>
          <i class="fas fa-share"></i>
          <span>Partager</span>
          <i class="fas fa-chevron-down dropdown-chevron"></i>
        </button>
        <div class="dropdown-menu-premium" data-dropdown-menu>
          <button class="dropdown-item-premium" onclick="copyAnalysisUrl()">
            <i class="fas fa-copy"></i>
            <span>Copier le lien</span>
          </button>
          <button class="dropdown-item-premium" onclick="downloadAnalysisPDF()">
            <i class="fas fa-file-pdf"></i>
            <span>Télécharger PDF</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Score (hero + détails) -->
    <% if @analysis.ai_provider.in?(["openai","claude","tests","smells"]) && @score.present? %>
      <%
        score       = (@score || 0).to_f
        ring_r      = 50
        ring_c      = (2 * Math::PI * ring_r)
        ring_offset = ring_c * (1 - score / 10.0)
        tier = case score
               when 8..10 then 'good'
               when 6..7  then 'ok'
               else              'bad'
               end
        grad = case tier
               when 'good' then { start: '#34d399', stop: '#10b981' }  # emerald 400→500
               when 'ok'   then { start: '#fbbf24', stop: '#f59e0b' }  # amber 400→500
               else              { start: '#f87171', stop: '#ef4444' } # red 400→500
               end
      %>

      <div class="score-section-premium">
        <div class="score-row-premium">
          <div class="ring-premium" role="img" aria-label="Score global <%= score.to_i %> sur 10">
            <svg viewBox="0 0 120 120" width="120" height="120" class="ring-svg" aria-hidden="true">
              <defs>
                <!-- ID unique par analyse pour éviter les collisions -->
                <linearGradient id="ringGrad-<%= @analysis.id %>" x1="0%" y1="0%" x2="100%" y2="0%">
                  <stop offset="0%"   stop-color="<%= grad[:start] %>" />
                  <stop offset="100%" stop-color="<%= grad[:stop] %>" />
                </linearGradient>
              </defs>

              <!-- fond -->
              <circle class="ring-bg" cx="60" cy="60" r="<%= ring_r %>" />

              <!-- progrès -->
              <circle
                class="ring-progress tier-<%= tier %>"
                cx="60" cy="60" r="<%= ring_r %>"
                style="stroke-dasharray:<%= ring_c %>px; stroke-dashoffset:<%= ring_offset %>px;"
              />

              <!-- “sheen” gradient animé discret -->
              <circle
                class="ring-sheen"
                cx="60" cy="60" r="<%= ring_r %>"
                style="stroke-dasharray: 12 <%= ring_c %>px;"
                stroke="url(#ringGrad-<%= @analysis.id %>)"
              />
            </svg>

            <div class="ring-center">
              <div class="ring-score"><%= (score % 1 == 0) ? score.to_i : ('%.1f' % score) %></div>
              <div class="ring-denom">/10</div>
            </div>
          </div>

          <div class="score-meta-premium">
            <div class="score-meta-title">Score global</div>
            <div class="score-meta-text">
              <%= case score
                  when 8..10 then "Code excellent, très peu d’actions requises."
                  when 6..7  then "Ton code est globalement bon, quelques améliorations possibles."
                  when 4..5  then "Code correct mais perfectible — prioriser quelques corrections."
                  else             "Attention : plusieurs améliorations importantes sont nécessaires."
                  end %>
            </div>
          </div>
        </div>

        <% if @scores.present? %>
          <div class="scores-stack-premium" role="group" aria-label="Scores détaillés">
            <% sections = {
              security:    { label: "Sécurité",    icon: "fa-shield-halved", key: :security    },
              performance: { label: "Performance", icon: "fa-gauge-high",    key: :performance },
              readability: { label: "Lisibilité",  icon: "fa-bezier-curve",  key: :readability },
              testing:     { label: "Tests",       icon: "fa-flask-vial",    key: :testing     }
            } %>

            <% sections.each do |slug, h| %>
              <%
                s   = (@scores[h[:key]] || 0).to_f
                pct = [[(s * 10).to_i, 0].max, 100].min
                tier_s = case s
                         when 8..10 then 'good'
                         when 6..7  then 'ok'
                         else              'bad'
                         end
              %>
              <div class="stack-item">
                <div class="stack-label">
                  <i class="fa-solid <%= h[:icon] %>"></i>
                    <span><%= h[:label] %></span>
                </div>
                <div class="stack-bar" role="progressbar"
     aria-valuenow="<%= s.to_i %>" aria-valuemin="0" aria-valuemax="10">

                  <!-- Couleur de la barre selon le score -->
                  <span class="stack-bar-fill stack-tier-<%= tier_s %>" style="width:<%= pct %>%"></span>
                </div>
                <div class="stack-value" aria-label="<%= h[:label] %> <%= s.to_i %> sur 10">
                  <%= s.to_i %>/10
                </div>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    <% end %>

    <!-- Code collapsible -->
    <div class="code-section-premium">
      <button class="code-toggle-premium" onclick="toggleCode()">
        <i class="fas fa-code code-icon"></i>
        <span>Code analysé</span>
        <i class="fas fa-chevron-down code-chevron"></i>
      </button>
      <div class="code-content-premium" style="display: none;">
        <pre class="code-block"><code class="language-<%= @analysis.language.downcase %>"><%= @analysis.code %></code></pre>
      </div>
    </div>

 <!-- Feedback Section -->
<% if @analysis.ai_feedback.present? %>
  <% parsed = parse_ai_feedback(@analysis.ai_feedback) %>

  <div class="feedback-section-premium">
    <h3 class="feedback-title-premium">
      <% if @analysis.ai_provider == "tests" %>
        🧪 Tests générés automatiquement
      <% elsif @analysis.ai_provider == "improve" %>
        ✨ Code amélioré automatiquement
      <% elsif @analysis.ai_provider == "smells" %>
        👃 Code Smells détectés
      <% else %>
        🤖 Retour de l'agent QA
      <% end %>
    </h3>

    <% if @analysis.ai_provider.in?(["openai","claude"]) && parsed[:sections].present? %>
      <!-- Version structurée : cartes non cliquables -->
<div class="feedback-grid-premium">
  <% order = [
    [:resume,      ["Résumé global", "fa-file-lines",   "",       "feedback-span-2"]],
    [:security,    ["Sécurité",      "fa-shield-halved","sec",    ""]],
    [:performance, ["Performance",   "fa-gauge-high",   "perf",   ""]],
    [:readability, ["Lisibilité",    "fa-bezier-curve", "read",   ""]],
    [:tests,       ["Tests",         "fa-flask-vial",   "tests",  ""]]
  ] %>

  <% order.each do |key, (label, icon, tone, extra_class)| %>
    <% next unless parsed[:sections][key] %>
    <% body   = parsed[:sections][key][:body] %>
    <% score  = parsed[:sections][key][:score] %>
    <% score ||= @scores[:security]    if key == :security %>
    <% score ||= @scores[:performance] if key == :performance %>
    <% score ||= @scores[:readability] if key == :readability %>
    <% score ||= @scores[:testing]     if key == :tests %>

    <% card_classes = ["feedback-card-premium"] %>
    <% card_classes << extra_class if extra_class.present? %>

    <div class="<%= card_classes.join(' ') %>">
      <div class="feedback-card-header">
        <span class="feedback-title-left">
          <i class="fa-solid <%= icon %> feedback-icon <%= tone %>"></i>
          <span><%= label %></span>
        </span>
        <% if score.present? %>
          <span class="feedback-score-chip"><%= score %>/10</span>
        <% end %>
      </div>
      <div class="feedback-body-premium">
        <%= simple_format(body, {}, wrapper_tag: "div") %>
      </div>
    </div>
  <% end %>
</div>

    <% else %>
      <!-- Fallback non structuré (inchangé) -->
      <div class="feedback-content-premium">
        <%= simple_format(@analysis.ai_feedback.to_s.strip, {}, wrapper_tag: "div") %>
      </div>
    <% end %>
  </div>

  <!-- Correction Section (Rapide/Expert uniquement) -->
  <% if @analysis.ai_provider.in?(["openai","claude"]) %>
    <% correction_text =
        if parsed[:correction].present?
          parsed[:correction]
        else
          (@analysis.ai_feedback.match(/^[^\S\r\n]*[🔧🛠].*$/m)&.to_s || "").strip
        end
    %>
    <% if correction_text.present? %>
      <div class="correction-section-premium">
        <h3 class="correction-title-premium">🛠 Proposition de correction</h3>
        <div class="correction-content-premium">
          <%= simple_format(correction_text, {}, wrapper_tag: "div") %>
          <button class="btn-apply-fix" disabled title="Bientôt disponible">
            <i class="fa-solid fa-wand-magic-sparkles"></i>
            Appliquer la correction automatiquement
          </button>
        </div>
      </div>
    <% end %>
  <% end %>
<% else %>

  <!-- Error Section -->
  <div class="error-section-premium">
    <div class="error-content-premium">
      <h3 class="error-title-premium">⚠️ Analyse échouée</h3>
      <p>L'analyse IA n'a pas pu être effectuée. Cela peut être dû à :</p>
      <ul>
        <li>Fichier trop volumineux (> 1000 lignes)</li>
        <li>Problème de connexion à l'API</li>
        <li>Timeout de l'API</li>
        <li>Code dans un format non reconnu</li>
      </ul>
      <p><strong>Solution :</strong> Essayez avec un fichier plus petit ou collez directement le code.</p>
    </div>
  </div>
<% end %>


    <!-- Navigation Buttons -->
    <div class="navigation-premium">
      <%= link_to "Nouvelle analyse", new_analysis_path, class: "btn-primary-premium" %>
      <%= link_to "Voir toutes les analyses", analyses_path, class: "btn-secondary-premium" %>
    </div>

  </div>
</div>

<script>
// Code collapsible toggle
function toggleCode() {
  const content = document.querySelector('.code-content-premium');
  const chevron = document.querySelector('.code-chevron');
  if (content.style.display === 'none') {
    content.style.display = 'block';
    chevron.style.transform = 'rotate(180deg)';
  } else {
    content.style.display = 'none';
    chevron.style.transform = 'rotate(0deg)';
  }
}

// Dropdown
document.addEventListener('click', function(e) {
  if (e.target.closest('[data-dropdown-trigger]')) {
    e.preventDefault();
    e.stopPropagation();
    const dropdown = e.target.closest('[data-dropdown]');
    const isOpen = dropdown.classList.contains('open');
    document.querySelectorAll('[data-dropdown]').forEach(d => d.classList.remove('open'));
    if (!isOpen) dropdown.classList.add('open');
    return;
  }
  if (!e.target.closest('[data-dropdown]')) {
    document.querySelectorAll('[data-dropdown]').forEach(d => d.classList.remove('open'));
  }
});

// Partage
function copyAnalysisUrl() {
  const currentUrl = window.location.href;
  navigator.clipboard.writeText(currentUrl).then(() => {
    const button = document.querySelector('.dropdown-item-premium');
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-check"></i><span>Lien copié !</span>';
    setTimeout(() => { button.innerHTML = originalText; }, 2000);
  });
}

function downloadAnalysisPDF() {
  const analysisId = '<%= @analysis.id %>';
  window.open(`/analyses/${analysisId}/download_pdf.pdf`, '_blank');
}

// Prism
document.addEventListener('DOMContentLoaded', function() {
  if (window.Prism) Prism.highlightAll();
});
</script>
