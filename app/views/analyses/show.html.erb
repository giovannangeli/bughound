<%= render 'shared/navbar_app' %>
<div class="analysis-container-premium">
  <div class="analysis-card-premium" data-provider="<%= @analysis.ai_provider %>">
    
    <!-- Header unifié avec partage -->
    <div class="analysis-header-premium">
      <div class="analysis-meta">
        <h1 class="analysis-title-premium"><%= @analysis.title %></h1>
        <div class="analysis-badges">
          <span class="lang-badge-premium"><%= @analysis.language %></span>
          <% if @analysis.ai_provider == "claude" %>
            <span class="provider-badge-premium claude">⚡ Claude (Expert)</span>
          <% elsif @analysis.ai_provider == "tests" %>
            <span class="provider-badge-premium tests">📋 Tests Automatiques</span>
          <% elsif @analysis.ai_provider == "improve" %>
            <span class="provider-badge-premium improve">✨ Amélioration Auto</span>
          <% elsif @analysis.ai_provider == "smells" %>
            <span class="provider-badge-premium smells">👃 Code Smells</span>
          <% else %>
            <span class="provider-badge-premium openai">🤖 OpenAI (Standard)</span>
          <% end %>
        </div>
      </div>
      
      <!-- Bouton partage -->
      <div class="dropdown-container-premium" data-dropdown>
        <button class="btn-share-premium" data-dropdown-trigger>
          <i class="fas fa-share"></i>
          <span>Partager</span>
          <i class="fas fa-chevron-down dropdown-chevron"></i>
        </button>
        <div class="dropdown-menu-premium" data-dropdown-menu>
          <button class="dropdown-item-premium" onclick="copyAnalysisUrl()">
            <i class="fas fa-copy"></i>
            <span>Copier le lien</span>
          </button>
          <button class="dropdown-item-premium" onclick="downloadAnalysisPDF()">
            <i class="fas fa-file-pdf"></i>
            <span>Télécharger PDF</span>
          </button>
        </div>
      </div>
    </div>

    <!-- Score (hero + détails) -->
    <% if @analysis.ai_provider.in?(["openai","claude","smells"]) && @score.present? %>
      <%
        score       = (@score || 0).to_f
        ring_r      = 50
        ring_c      = (2 * Math::PI * ring_r)
        ring_offset = ring_c * (1 - score / 10.0)
        tier = case score
               when 8..10 then 'good'
               when 6..7  then 'ok'
               else              'bad'
               end
        grad = case tier
               when 'good' then { start: '#34d399', stop: '#10b981' }
               when 'ok'   then { start: '#fbbf24', stop: '#f59e0b' }
               else              { start: '#f87171', stop: '#ef4444' }
               end
      %>

      <div class="score-section-premium">
        <div class="score-row-premium">
          <div class="ring-premium" role="img" aria-label="Score global <%= score.to_i %> sur 10">
            <svg viewBox="0 0 120 120" width="120" height="120" class="ring-svg" aria-hidden="true">
              <defs>
                <linearGradient id="ringGrad-<%= @analysis.id %>" x1="0%" y1="0%" x2="100%" y2="0%">
                  <stop offset="0%"   stop-color="<%= grad[:start] %>" />
                  <stop offset="100%" stop-color="<%= grad[:stop] %>" />
                </linearGradient>
              </defs>

              <!-- fond -->
              <circle class="ring-bg" cx="60" cy="60" r="<%= ring_r %>" />

              <!-- progrès -->
              <circle
                class="ring-progress tier-<%= tier %>"
                cx="60" cy="60" r="<%= ring_r %>"
                style="stroke-dasharray:<%= ring_c %>px; stroke-dashoffset:<%= ring_offset %>px;"
              />

              <!-- sheen -->
              <circle
                class="ring-sheen"
                cx="60" cy="60" r="<%= ring_r %>"
                style="stroke-dasharray: 12 <%= ring_c %>px;"
                stroke="url(#ringGrad-<%= @analysis.id %>)"
              />
            </svg>

            <div class="ring-center">
              <div class="ring-score"><%= (score % 1 == 0) ? score.to_i : ('%.1f' % score) %></div>
              <div class="ring-denom">/10</div>
            </div>
          </div>

          <div class="score-meta-premium">
            <div class="score-meta-title">Score global</div>
            <div class="score-meta-text">
              <%= case score
                  when 8..10 then "Code excellent, très peu d'actions requises."
                  when 6..7  then "Ton code est globalement bon, quelques améliorations possibles."
                  when 4..5  then "Code correct mais perfectible — prioriser quelques corrections."
                  else             "Attention : plusieurs améliorations importantes sont nécessaires."
                  end %>
            </div>
          </div>
        </div>

        <% if @scores.present? %>
          <div class="scores-stack-premium" role="group" aria-label="Scores détaillés">
            <% sections = {
              security:    { label: "Sécurité",    icon: "fa-shield-halved", key: :security    },
              performance: { label: "Performance", icon: "fa-gauge-high",    key: :performance },
              readability: { label: "Lisibilité",  icon: "fa-bezier-curve",  key: :readability },
              testing:     { label: "Tests",       icon: "fa-flask-vial",    key: :testing     }
            } %>

            <% sections.each do |slug, h| %>
              <%
                s   = (@scores[h[:key]] || 0).to_f
                pct = [[(s * 10).to_i, 0].max, 100].min
                tier_s = case s
                         when 8..10 then 'good'
                         when 6..7  then 'ok'
                         else              'bad'
                         end
              %>
              <div class="stack-item">
                <div class="stack-label">
                  <i class="fa-solid <%= h[:icon] %>"></i>
                    <span><%= h[:label] %></span>
                </div>
                <div class="stack-bar" role="progressbar"
     aria-valuenow="<%= s.to_i %>" aria-valuemin="0" aria-valuemax="10">
                  <span class="stack-bar-fill stack-tier-<%= tier_s %>" style="width:<%= pct %>%"></span>
                </div>
                <div class="stack-value" aria-label="<%= h[:label] %> <%= s.to_i %> sur 10">
                  <%= s.to_i %>/10
                </div>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    <% end %>

    <!-- Code collapsible -->
    <div class="code-section-premium">
      <button class="code-toggle-premium" onclick="toggleCode()">
        <i class="fas fa-code code-icon"></i>
        <span>Code analysé</span>
        <i class="fas fa-chevron-down code-chevron"></i>
      </button>
      <div class="code-content-premium" style="display: none;">
        <pre class="code-block line-numbers">
<code class="language-<%= @analysis.language.downcase %>"><%= @analysis.code %></code></pre>
      </div>
    </div>

    <!-- Feedback Section -->
    <% if @analysis.ai_feedback.present? %>
      <% parsed = @parsed || parse_ai_feedback(@analysis.ai_feedback) %>

      <div class="feedback-section-premium">
        <% unless @analysis.ai_provider == "tests" %>
          <h3 class="feedback-title-premium">
            <% if @analysis.ai_provider == "improve" %>
              🤖 Retour de l'agent QA
            <% elsif @analysis.ai_provider == "smells" %>
              🤖 Retour de l'agent QA
            <% else %>
              🤖 Retour de l'agent QA
            <% end %>
          </h3>
        <% end %>

        <% if @analysis.ai_provider == "tests" %>
          <% tf = parse_tests_feedback(@analysis.ai_feedback) %>

          <div class="tests-wrap-premium">
            <!-- Chip Framework -->
            <% if tf[:framework].present? %>
              <div class="tests-chips">
                <span class="chip chip-soft-violet">
                  <i class="fa-solid fa-wrench"></i>
                  <strong>Framework :</strong>&nbsp;<%= tf[:framework] %>
                </span>
              </div>
            <% end %>

            <!-- Grid 2 colonnes : Scénarios + Instructions -->
            <div class="tests-info-grid">
              <!-- Scénarios testés -->
              <% if tf[:scenarios].present? %>
                <div class="tests-block">
                  <div class="tests-block-title">🎯 Scénarios testés</div>
                  <ul class="tests-list">
                    <% tf[:scenarios].to_s.lines.each do |line| %>
                      <% item = line.strip.sub(/^\-+\s*/, '') %>
                      <% next if item.blank? %>
                      <li>
                        <i class="fa-regular fa-square-check"></i>
                        <span><%= item %></span>
                      </li>
                    <% end %>
                  </ul>
                </div>
              <% end %>

              <!-- Instructions d'exécution -->
              <% if tf[:instructions].present? %>
                <div class="tests-block">
                  <div class="tests-block-title">📚 Instructions d'exécution</div>
                  <div class="tests-instructions-body exec-steps">
                    <%= markdown(tf[:instructions]) %>
                  </div>
                </div>
              <% end %>
            </div>

            <!-- Code des tests - Pleine largeur en dessous -->
            <% if tf[:code].present? %>
              <% lang_for_tests = case tf[:framework].to_s.downcase
                                  when /rspec/ then 'ruby'
                                  when /pytest/ then 'python'
                                  when /jest/ then 'javascript'
                                  else @analysis.language.downcase
                                  end %>
              <div class="tests-code-block">
                <div class="tests-block-title">💻 Code des tests</div>
                <pre class="code-block line-numbers">
<code class="language-<%= lang_for_tests %>"><%= tf[:code] %></code></pre>
              </div>
            <% end %>

            <!-- Notes importantes -->
            <% if tf[:notes].present? %>
              <div class="tests-note">
                <div class="tests-note-icon">ℹ️</div>
                <div class="tests-note-body">
                  <%= markdown(tf[:notes]) %>
                </div>
              </div>
            <% end %>
          </div>

        <% elsif @analysis.ai_provider.in?(["openai","claude","smells","improve"]) && parsed[:sections].present? %>
          <!-- Version structurée : cartes avec traitement spécial code smells -->
          <div class="feedback-grid-premium">
            <% order = [
              [:resume,      ["Résumé global", "fa-file-lines",   "",       "feedback-span-2"]],
              [:security,    ["Sécurité",      "fa-shield-halved","sec",    ""]],
              [:performance, ["Performance",   "fa-gauge-high",   "perf",   ""]],
              [:readability, ["Lisibilité",    "fa-bezier-curve", "read",   ""]],
              [:tests,       ["Tests",         "fa-flask-vial",   "tests",  ""]]
            ] %>

            <% order.each do |key, (label, icon, tone, extra_class)| %>
              <% next unless parsed[:sections][key] %>
              <% next if key == :resume && @analysis.ai_provider == "smells" %>
              
              <% body = parsed[:sections][key][:body] %>
              <% if key == :tests && @analysis.ai_provider.in?(["openai", "claude"]) %>
  <% body = body.gsub(/🎯\s*Pistes d'amélioration.*$/mi, '').strip %>
<% end %>
              <% score = parsed[:sections][key][:score] %>
              
              <%# TRAITEMENT SPÉCIAL POUR CODE SMELLS ET IMPROVE %>
              <% if @analysis.ai_provider == "smells" %>
                <% body = process_smells_content(body, key) %>
              <% elsif @analysis.ai_provider == "improve" %>
                <% body = body %>
              <% end %>
              
              <% score ||= @scores[:security]    if key == :security %>
              <% score ||= @scores[:performance] if key == :performance %>
              <% score ||= @scores[:readability] if key == :readability %>
              <% score ||= @scores[:testing]     if key == :tests %>

              <% card_classes = ["feedback-card-premium"] %>
              <% card_classes << extra_class if extra_class.present? %>

              <div class="<%= card_classes.join(' ') %>">
                <div class="feedback-card-header">
                  <span class="feedback-title-left">
                    <i class="fa-solid <%= icon %> feedback-icon <%= tone %>"></i>
                    <span><%= label %></span>
                  </span>
                  <% if score.present? %>
                    <span class="feedback-score-chip"><%= score %>/10</span>
                  <% end %>
                </div>
                <div class="feedback-body-premium">
                  <%= simple_format(body, {}, wrapper_tag: "div") %>
                </div>
              </div>
            <% end %>
          </div>

          <!-- Section dédiée Code Smells - Détails complets -->
          <% if @analysis.ai_provider == "smells" %>
            <div style="margin-top: 2rem;">
              <div class="feedback-content-premium">
                <% 
                  # Afficher seulement la partie détails des code smells
                  smells_details = @analysis.ai_feedback.dup
                  # Garder seulement à partir de "Code Smells détectés"
                  if match = smells_details.match(/(👃.*?Code Smells détectés.*)/mi)
                    smells_content = match[1]
                    # Enlever les redondances en début mais garder tous les détails
                    smells_content.gsub!(/^📊\s*Score\s*[:：].*?\n/mi, "")
                    smells_content.gsub!(/^\[.*?\]\s*\n/mi, "")
                %>
                <%= simple_format(smells_content, {}, wrapper_tag: "div") %>
                <% end %>
              </div>
            </div>
          <% end %>

        <% else %>
          <!-- Fallback non structuré -->
          <div class="feedback-content-premium">
            <% content = @analysis.ai_feedback.to_s.strip %>
            <% if @analysis.ai_provider == "improve" %>
              <% content = clean_improve_feedback(content) %>
            <% end %>
            <%= simple_format(content, {}, wrapper_tag: "div") %>
          </div>
        <% end %>
      </div>

      <!-- Section Pistes d'amélioration (Rapide/Expert uniquement) - SÉPARÉE -->
      <% if @analysis.ai_provider.in?(["openai","claude"]) %>
        <% 
       # Extraction des pistes d'amélioration - VERSION ROBUSTE
pistes_match = @analysis.ai_feedback.match(/🎯\s*Pistes d'amélioration\s*:?\s*((?:(?!⏱️).)*)⏱️/mi)
pistes_text = pistes_match ? pistes_match[1].strip : nil

# Si pas trouvé avec ⏱️, essayer sans
if pistes_text.blank?
  pistes_match = @analysis.ai_feedback.match(/🎯\s*Pistes d'amélioration\s*:?\s*(.*?)$/mi)
  pistes_text = pistes_match ? pistes_match[1].strip : nil
end
          
          # Extraction du temps estimé
          temps_match = @analysis.ai_feedback.match(/⏱️\s*\*?\*?Temps estimé.*?\*?\*?\s*:?\s*([^\n]+)/i)
          temps_estime = temps_match ? temps_match[1].strip : nil
        %>
        
        <% if pistes_text.present? %>
          <div class="correction-section-premium">
            <h3 class="correction-title-premium">🎯 Pistes d'amélioration</h3>
            
            <div class="pistes-content-premium">
              <% 
                # Parser le contenu pour identifier les sections
                sections = []
                
                # Chercher "Points critiques"
                if pistes_text.match(/\*\*Points critiques\*\*(.+?)(?=\*\*|⏱️|$)/mi)
                  sections << {
                    title: "Points critiques",
                    content: $1.strip,
                    css_class: "pistes-critiques"
                  }
                end
                
                # Chercher "Améliorations recommandées" ou "Améliorations rapides"
                if pistes_text.match(/\*\*Améliorations?\s+(?:recommandées|rapides)?\*\*(.+?)(?=\*\*|⏱️|$)/mi)
                  sections << {
                    title: "Améliorations recommandées",
                    content: $1.strip,
                    css_class: "pistes-importantes"
                  }
                end
                
                # Si pas de sections trouvées, traiter tout comme une liste
                if sections.empty?
                  sections << {
                    title: nil,
                    content: pistes_text,
                    css_class: "pistes-conseils"
                  }
                end
              %>
              
              <% sections.each do |section| %>
                <% if section[:title].present? %>
                  <div class="pistes-section-title"><%= section[:title] %></div>
                <% end %>
             <div class="<%= section[:css_class] %>">
  <%= markdown(section[:content]) %>
</div>
              <% end %>
              
              <% if temps_estime.present? %>
                <div class="pistes-temps">
                  <strong>⏱️ Temps estimé :</strong> <%= temps_estime %>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>
      <% end %>

      <!-- Card "Code refactorisé" (mode improve) -->
      <% if @analysis.ai_provider == "improve" %>
        <% ref_lang = (@analysis.ai_feedback[/```([a-zA-Z]+)/, 1] || @analysis.language).downcase %>
        <% ref_code = @analysis.ai_feedback[/```[a-zA-Z]*\n(.*?)```/m, 1] %>
        <% if ref_code.present? %>
          <div class="correction-section-premium">
            <h3 class="correction-title-premium">💻 Code refactorisé</h3>
            <div class="code-card">
              <pre class="code-block line-numbers"><code class="language-<%= ref_lang %>"><%= ref_code %></code></pre>
            </div>
          </div>
        <% end %>
      <% end %>

    <% else %>
      <!-- Error Section -->
      <div class="error-section-premium">
        <div class="error-content-premium">
          <h3 class="error-title-premium">⚠️ Analyse échouée</h3>
          <p>L'analyse IA n'a pas pu être effectuée. Cela peut être dû à :</p>
          <ul>
            <li>Fichier trop volumineux (> 1000 lignes)</li>
            <li>Problème de connexion à l'API</li>
            <li>Timeout de l'API</li>
            <li>Code dans un format non reconnu</li>
          </ul>
          <p><strong>Solution :</strong> Essayez avec un fichier plus petit ou collez directement le code.</p>
        </div>
      </div>
    <% end %>

    <!-- Navigation Buttons -->
    <div class="navigation-premium">
      <%= link_to "Nouvelle analyse", new_analysis_path, class: "btn-primary-premium" %>
      <%= link_to "Voir toutes les analyses", analyses_path, class: "btn-secondary-premium" %>
    </div>

  </div>
</div>

<script>
// Code collapsible toggle
function toggleCode() {
  const content = document.querySelector('.code-content-premium');
  const chevron = document.querySelector('.code-chevron');
  if (content.style.display === 'none') {
    content.style.display = 'block';
    chevron.style.transform = 'rotate(180deg)';
  } else {
    content.style.display = 'none';
    chevron.style.transform = 'rotate(0deg)';
  }
}

// Dropdown
document.addEventListener('click', function(e) {
  if (e.target.closest('[data-dropdown-trigger]')) {
    e.preventDefault();
    e.stopPropagation();
    const dropdown = e.target.closest('[data-dropdown]');
    const isOpen = dropdown.classList.contains('open');
    document.querySelectorAll('[data-dropdown]').forEach(d => d.classList.remove('open'));
    if (!isOpen) dropdown.classList.add('open');
    return;
  }
  if (!e.target.closest('[data-dropdown]')) {
    document.querySelectorAll('[data-dropdown]').forEach(d => d.classList.remove('open'));
  }
});

// Partage
function copyAnalysisUrl() {
  const currentUrl = window.location.href;
  navigator.clipboard.writeText(currentUrl).then(() => {
    const button = document.querySelector('.dropdown-item-premium');
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-check"></i><span>Lien copié !</span>';
    setTimeout(() => { button.innerHTML = originalText; }, 2000);
  });
}

function downloadAnalysisPDF() {
  const analysisId = '<%= @analysis.id %>';
  window.open(`/analyses/${analysisId}/download_pdf.pdf`, '_blank');
}

// Prism
document.addEventListener('DOMContentLoaded', function() {
  if (window.Prism) Prism.highlightAll();
});

// Boutons copy personnalisés pour tests et code refactorisé
document.addEventListener('DOMContentLoaded', function() {
  
  function createCustomCopyButtons() {
    // Supprimer les anciens boutons personnalisés
    document.querySelectorAll('.custom-copy-btn').forEach(btn => btn.remove());
    
    // Stratégies pour trouver les blocs de code appropriés
    const strategies = [
      () => document.querySelectorAll('.tests-code-block .code-block, .code-card .code-block'),
      () => document.querySelectorAll('.code-block:not(.code-content-premium .code-block)'),
      () => {
        const blocks = [];
        document.querySelectorAll('.tests-code-block, .code-card').forEach(container => {
          const codeBlock = container.querySelector('.code-block');
          if (codeBlock) blocks.push(codeBlock);
        });
        return blocks;
      }
    ];
    
    // Utiliser la première stratégie qui trouve des éléments
    for (const strategy of strategies) {
      const blocks = strategy();
      if (blocks.length > 0) {
        Array.from(blocks).forEach(codeBlock => {
          // Éviter les doublons
          if (codeBlock.querySelector('.custom-copy-btn')) return;
          
          // Créer le bouton
          const copyBtn = document.createElement('button');
          copyBtn.className = 'custom-copy-btn';
          copyBtn.textContent = 'Copier';
          copyBtn.setAttribute('type', 'button');
          copyBtn.style.cssText = `
            position: absolute !important;
            top: 1rem !important;
            right: 1rem !important;
            z-index: 20 !important;
            background: #374151 !important;
            color: #f8fafc !important;
            border: 1px solid #4b5563 !important;
            border-radius: 8px !important;
            padding: 0.5rem 0.75rem !important;
            font-size: 0.875rem !important;
            cursor: pointer !important;
          `;
          
          // Événement de copie
          copyBtn.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            const codeElement = codeBlock.querySelector('code');
            if (codeElement) {
              const textToCopy = codeElement.textContent || codeElement.innerText;
              
              if (navigator.clipboard) {
                navigator.clipboard.writeText(textToCopy).then(() => {
                  showCopiedState(copyBtn);
                });
              } else {
                fallbackCopy(textToCopy);
                showCopiedState(copyBtn);
              }
            }
          });
          
          codeBlock.appendChild(copyBtn);
        });
        break; // Arrêter après la première stratégie réussie
      }
    }
  }
  
  function showCopiedState(button) {
    button.textContent = 'Copié!';
    button.style.background = '#10b981 !important';
    setTimeout(() => {
      button.textContent = 'Copier';
      button.style.background = '#374151 !important';
    }, 2000);
  }
  
  function fallbackCopy(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
  }
  
  // Initialiser les boutons après chargement
  setTimeout(createCustomCopyButtons, 100);
  setTimeout(createCustomCopyButtons, 500);
  setTimeout(createCustomCopyButtons, 1000);
});

function styleCodeSmells() {
  // Ne s'exécute que pour les analyses de type "smells"
  const container = document.querySelector('[data-provider="smells"] .feedback-content-premium');
  if (!container) return;

  // Récupère tout le contenu
  const content = container.innerHTML;
  
  // Définit les patterns et leurs classes CSS correspondantes
  const sectionPatterns = [
    { 
      pattern: /\*\*Synthèse\*\*/g, 
      replacement: '<div class="smells-section-title">Synthèse</div><div class="smells-synthese">',
      closeDiv: true
    },
    { 
      pattern: /\*\*Critiques \(🔴\)\*\*/g, 
      replacement: '</div><div class="smells-section-title">Critiques 🔴</div><div class="smells-critiques">',
      closeDiv: false
    },
    { 
      pattern: /\*\*Modérés \(🟡\)\*\*/g, 
      replacement: '</div><div class="smells-section-title">Modérés 🟡</div><div class="smells-moderes">',
      closeDiv: false
    },
    { 
      pattern: /\*\*Détail par catégories\*\*/g, 
      replacement: '</div><div class="smells-section-title">Détail par catégories</div><div class="smells-detail">',
      closeDiv: false
    },
    { 
      pattern: /\*\*Plan d'action\*\*/g, 
      replacement: '</div><div class="smells-section-title">Plan d\'action</div><div class="smells-plan">',
      closeDiv: false
    },
    { 
      pattern: /\*\*Impact pédagogique\*\*/g, 
      replacement: '</div><div class="smells-section-title">Impact pédagogique</div><div class="smells-impact">',
      closeDiv: false
    }
  ];

  let styledContent = content;

  // Applique chaque transformation
  sectionPatterns.forEach(({ pattern, replacement }) => {
    styledContent = styledContent.replace(pattern, replacement);
  });

  // Ferme la dernière div ouverte
  styledContent += '</div>';

  // Nettoie les autres étoiles résiduelles autour des mots
  styledContent = styledContent.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');

  // Applique le contenu stylisé
  container.innerHTML = styledContent;
}

function styleImproveContent() {
  const container = document.querySelector('[data-provider="improve"] .feedback-content-premium');
  if (!container) {
    return;
  }

  let content = container.innerHTML;
  
  // Transformations
  if (content.includes("Améliorations apportées")) {
    content = content.replace(/Améliorations apportées.*?:/g, '<div class="improve-section-title">🎯 Améliorations apportées</div><div class="improve-ameliorations">');
  }
  
  if (content.includes("Explications détaillées")) {
    content = content.replace(/Explications détaillées.*?:/g, '</div><div class="improve-section-title">📝 Explications détaillées</div><div class="improve-explications">');
  }
  
  if (content.includes("Bénéfices obtenus")) {
    content = content.replace(/Bénéfices obtenus.*?:/g, '</div><div class="improve-section-title">🚀 Bénéfices obtenus</div><div class="improve-benefices">');
  }
  
  content += '</div>';
  
  container.innerHTML = content;
}


// Pour les mises à jour AJAX classiques
document.addEventListener('DOMContentLoaded', function() {
  setTimeout(styleCodeSmells, 100);
  setTimeout(styleImproveContent, 100);
  
  // Observer les changements dans le DOM
  const observer = new MutationObserver(function() {
    setTimeout(styleCodeSmells, 100);
    setTimeout(styleImproveContent, 100);
  });
  
  observer.observe(document.body, { childList: true, subtree: true });
});
</script>