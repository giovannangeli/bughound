require "openai"

class AnalysesController < ApplicationController
  def index
    if params[:language].present?
      @analyses = Analysis.where(language: params[:language]).order(created_at: :desc)
    else
      @analyses = Analysis.all.order(created_at: :desc)
    end

    @languages = Analysis.distinct.pluck(:language).compact.sort
  end

  def new
    @analysis = Analysis.new
  end

  def create
    @analysis = Analysis.new(analysis_params)

    if @analysis.save
      response = send_to_openai(@analysis.language, @analysis.code)
      @analysis.update(ai_feedback: response)
      redirect_to @analysis
    else
      render :new
    end
  end

  def show
    @analysis = Analysis.find(params[:id])

    # Debug pour identifier les probl√®mes de parsing
    Rails.logger.debug "=== DEBUGGING SCORES ==="
    Rails.logger.debug "AI Feedback: #{@analysis.ai_feedback}"

    # Score global - regex ultra-pr√©cise
    global_match = @analysis.ai_feedback.match(/üìä.*?Score.*?(\d{1,2})\/10/mi)
    @score = global_match ? global_match[1].to_i : nil
    Rails.logger.debug "Score global d√©tect√©: #{@score}"

    # Scores par cat√©gorie avec regex strictes
    @scores = {}

    # S√©curit√©
    security_match = @analysis.ai_feedback.match(/üõ°Ô∏è.*?S√©curit√©.*?(\d{1,2})\/10/mi)
    @scores[:security] = security_match[1].to_i if security_match

    # Performance
    performance_match = @analysis.ai_feedback.match(/‚öôÔ∏è.*?Performance.*?(\d{1,2})\/10/mi)
    @scores[:performance] = performance_match[1].to_i if performance_match

    # Lisibilit√©
    readability_match = @analysis.ai_feedback.match(/üìê.*?Lisibilit√©.*?(\d{1,2})\/10/mi)
    @scores[:readability] = readability_match[1].to_i if readability_match

    # Tests
    testing_match = @analysis.ai_feedback.match(/üß™.*?test.*?(\d{1,2})\/10/mi)
    @scores[:testing] = testing_match[1].to_i if testing_match

    Rails.logger.debug "Scores d√©tect√©s: #{@scores}"
  end

  private

  def analysis_params
    params.require(:analysis).permit(:title, :language, :code)
  end

  def send_to_openai(language, code)
    client = OpenAI::Client.new(
      access_token: ENV["OPENAI_API_KEY"],
      uri_base: "https://api.openai.com/v1"
    )

    prompt = build_ultimate_prompt(language, code)

    response = client.chat(
      parameters: {
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "Tu es un expert QA senior avec 15 ans d'exp√©rience. Tu analyses le code avec une rigueur professionnelle MAXIMALE. Tu suis EXACTEMENT les bar√®mes donn√©s sans exception."
          },
          { role: "user", content: prompt }
        ],
        temperature: 0.1 # Ultra-bas pour coh√©rence maximale
      }
    )

    response.dig("choices", 0, "message", "content")
  rescue => e
    "Erreur lors de l'appel √† OpenAI : #{e.message}"
  end

  def build_ultimate_prompt(language, code)
    severity_matrix = get_severity_matrix(language)
    specific_rules = get_language_specific_rules(language)
    edge_cases = get_edge_cases_rules
    language_detection = get_language_detection_rules

    <<~PROMPT
      üéØ MISSION : Analyser rigoureusement ce code #{language} avec l'exigence d'un expert QA senior.

      ‚öñÔ∏è BAR√àME STRICT OBLIGATOIRE :
      #{severity_matrix}

      üîç R√àGLES SP√âCIFIQUES #{language.upcase} :
      #{specific_rules}

      üö® CAS PARTICULIERS √Ä G√âRER :
      #{edge_cases}

      üîç D√âTECTION AUTOMATIQUE DE LANGAGE :
      #{language_detection}

      üìã FORMAT EXACT √Ä RESPECTER (Z√âRO VARIATION AUTORIS√âE) :

      üìä Score qualit√© globale : X/10
      [Commentaire bref expliquant la note - SANS mentionner le calcul de moyenne]

      üßæ R√©sum√© global :
      [EXACTEMENT 2-3 phrases d√©crivant l'objectif et la structure du code]

      üõ°Ô∏è S√©curit√© : X/10
      [Applique STRICTEMENT le bar√®me. Faille critique = MAX 3/10]
      [Liste chaque probl√®me d√©tect√© avec gravit√©]

      ‚öôÔ∏è Performance : X/10
      [Code basique fonctionnel = MAX 7/10. Seuls les codes optimis√©s = 8-10/10]
      [Analyse complexit√© algorithmique O() si pertinent]

      üìê Lisibilit√© et qualit√© du code : X/10
      [Variables a,b,c = MAX 5/10. Noms explicites requis pour 7+/10]
      [V√©rifie conventions, commentaires, structure]

      üß™ Recommandations de tests : X/10
      [Code sans gestion d'erreur = MAX 6/10]
      [Liste les tests sp√©cifiques manquants]

      üîß Proposition de correction :
      [SI probl√®mes d√©tect√©s : CODE COMPLET corrig√© avec commentaires]
      [SI code parfait : "Code de qualit√© professionnelle, aucune correction n√©cessaire."]
      [INTERDICTION ABSOLUE de recopier le code original]

      CODE √Ä ANALYSER :
      ```#{language.downcase}
      #{code}
      ```

      ‚ö†Ô∏è CONTRAINTES ABSOLUES :
      - V√âRIFIER que le code correspond bien au langage #{language} s√©lectionn√©
      - Si incoh√©rence d√©tect√©e : mentionner le vrai langage en d√©but d'analyse
      - Calcul de moyenne EXACT pour score global
      - Bar√®mes NON N√âGOCIABLES
      - Analyse EXHAUSTIVE de chaque ligne de code
      - Zero tol√©rance pour les failles de s√©curit√©
      - Correction COMPL√àTE ou mention explicite que le code est parfait
    PROMPT
  end

  def get_severity_matrix(language)
    <<~MATRIX
      S√âCURIT√â (Bar√®me rigide) :
      ‚Ä¢ 1-2/10 : Failles critiques (injection SQL, XSS, buffer overflow, eval() dangereux)
      ‚Ä¢ 3-4/10 : Failles mod√©r√©es (validation manquante, division par z√©ro, gestion erreurs absente)
      ‚Ä¢ 5-6/10 : S√©curit√© basique avec quelques faiblesses mineures
      ‚Ä¢ 7-8/10 : Bonnes pratiques de s√©curit√©, am√©liorations mineures possibles
      ‚Ä¢ 9-10/10 : S√©curit√© exemplaire, d√©fense en profondeur

      PERFORMANCE (Bar√®me strict) :
      ‚Ä¢ 1-3/10 : Algorithme catastrophique (O(n¬≥+), boucles imbriqu√©es inutiles)
      ‚Ä¢ 4-5/10 : Performance m√©diocre, optimisations √©videntes manqu√©es
      ‚Ä¢ 6-7/10 : Performance correcte pour code basique/simple
      ‚Ä¢ 8-9/10 : Code optimis√©, bonnes pratiques appliqu√©es
      ‚Ä¢ 10/10 : Performance exceptionnelle, algorithme optimal

      LISIBILIT√â (Bar√®me exigeant) :
      ‚Ä¢ 1-3/10 : Code illisible (variables a,b,c, pas de structure, conventions ignor√©es)
      ‚Ä¢ 4-5/10 : Lisible mais noms de variables non explicites ou structure confuse
      ‚Ä¢ 6-7/10 : Code clair, noms corrects, structure logique
      ‚Ä¢ 8-9/10 : Excellent style, commentaires utiles, conventions respect√©es
      ‚Ä¢ 10/10 : Code exemplaire, documentation parfaite

      TESTS (Bar√®me r√©aliste) :
      ‚Ä¢ 1-3/10 : Code non testable, aucune gestion d'erreur
      ‚Ä¢ 4-5/10 : Tests basiques possibles mais gestion d'erreurs absente
      ‚Ä¢ 6-7/10 : Code testable, quelques cas d'erreur g√©r√©s
      ‚Ä¢ 8-9/10 : Bonne testabilit√©, gestion d'erreurs solide
      ‚Ä¢ 10/10 : Code parfaitement testable, toutes les erreurs anticip√©es
    MATRIX
  end

  def get_language_specific_rules(language)
    case language.downcase.strip
    when "ruby"
      <<~RUBY_RULES
        S√âCURIT√â RUBY CRITIQUE :
        ‚Ä¢ Injection SQL : "SELECT * FROM users WHERE id = #{params[:id]}" = 1/10
        ‚Ä¢ Mass assignment : User.create(params[:user]) = 2/10
        ‚Ä¢ XSS : raw(), html_safe sans validation = 2/10
        ‚Ä¢ CSRF : skip_before_action :verify_authenticity_token = 3/10

        PERFORMANCE RUBY :
        ‚Ä¢ N+1 queries : Post.all.each { |p| p.comments.count } = 3/10
        ‚Ä¢ Pas d'includes/joins quand n√©cessaire = 4/10
        ‚Ä¢ M√©thodes >30 lignes = MAX 6/10
        ‚Ä¢ Boucles dans boucles = MAX 5/10

        LISIBILIT√â RUBY :
        ‚Ä¢ Variables a,b,c au lieu de user,email,password = MAX 4/10
        ‚Ä¢ Pas de snake_case = -2 points
        ‚Ä¢ M√©thodes sans verbe explicite = MAX 6/10
        ‚Ä¢ Pas de s√©paration MVC = MAX 5/10
      RUBY_RULES

    when "python"
      <<~PYTHON_RULES
        S√âCURIT√â PYTHON CRITIQUE :
        ‚Ä¢ eval(input()) ou exec() avec donn√©es utilisateur = 1/10
        ‚Ä¢ pickle.load() de source non fiable = 2/10
        ‚Ä¢ os.system() avec input utilisateur = 2/10
        ‚Ä¢ SQL string concatenation = 2/10

        PERFORMANCE PYTHON :
        ‚Ä¢ Boucles O(n¬≤) √©vitables avec dict/set = 3/10
        ‚Ä¢ Pas de list comprehensions quand appropri√© = MAX 6/10
        ‚Ä¢ Imports dans boucles = 4/10
        ‚Ä¢ Pas de __slots__ pour classes avec beaucoup d'instances = MAX 7/10

        LISIBILIT√â PYTHON :
        ‚Ä¢ Pas de PEP8 (lignes >79 chars, pas de snake_case) = MAX 5/10
        ‚Ä¢ Pas de docstrings = MAX 6/10
        ‚Ä¢ Variables a,b,c = MAX 4/10
        ‚Ä¢ Pas de type hints en 2024 = MAX 7/10
      PYTHON_RULES

    when "javascript", "js"
      <<~JS_RULES
        S√âCURIT√â JS CRITIQUE :
        ‚Ä¢ innerHTML = userInput sans validation = 1/10
        ‚Ä¢ eval() avec donn√©es utilisateur = 1/10
        ‚Ä¢ document.write() avec input = 2/10
        ‚Ä¢ Pas de CSP headers = MAX 6/10

        PERFORMANCE JS :
        ‚Ä¢ document.getElementById() dans boucles = 4/10
        ‚Ä¢ Event listeners non nettoy√©s = 5/10
        ‚Ä¢ Pas d'async/await pour API calls = MAX 6/10
        ‚Ä¢ DOM manipulation excessive = 4/10

        LISIBILIT√â JS :
        ‚Ä¢ var au lieu de const/let = MAX 5/10
        ‚Ä¢ Fonctions anonymes partout = MAX 6/10
        ‚Ä¢ Variables a,b,c = MAX 4/10
        ‚Ä¢ Pas de JSDoc = MAX 7/10
      JS_RULES

    when "c++"
      <<~CPP_RULES
        S√âCURIT√â C++ CRITIQUE :
        ‚Ä¢ char buffer[10]; gets(buffer) = 1/10
        ‚Ä¢ cin >> char_array sans limite = 2/10
        ‚Ä¢ new sans delete correspondant = 3/10
        ‚Ä¢ Pointeurs dangling = 3/10

        PERFORMANCE C++ :
        ‚Ä¢ Copies d'objets inutiles (pass by value) = 4/10
        ‚Ä¢ malloc/free au lieu de new/delete = 5/10
        ‚Ä¢ Pas de const correctness = MAX 6/10
        ‚Ä¢ Algorithmes STL non utilis√©s = MAX 6/10

        LISIBILIT√â C++ :
        ‚Ä¢ using namespace std; = MAX 6/10
        ‚Ä¢ Variables a,b,c = MAX 4/10
        ‚Ä¢ Pas de RAII = MAX 5/10
        ‚Ä¢ Pas de smart pointers en C++11+ = MAX 6/10
      CPP_RULES

    when "sql"
      <<~SQL_RULES
        S√âCURIT√â SQL CRITIQUE :
        ‚Ä¢ "SELECT * FROM users WHERE id = " + userId = 1/10
        ‚Ä¢ GRANT ALL PRIVILEGES = 2/10
        ‚Ä¢ Mots de passe en dur = 2/10
        ‚Ä¢ Pas de prepared statements = 3/10

        PERFORMANCE SQL :
        ‚Ä¢ SELECT * au lieu de colonnes sp√©cifiques = 4/10
        ‚Ä¢ Pas d'INDEX sur colonnes WHERE/JOIN = 3/10
        ‚Ä¢ Sous-requ√™tes au lieu de JOINs = 5/10
        ‚Ä¢ Pas de LIMIT sur grandes tables = 4/10

        LISIBILIT√â SQL :
        ‚Ä¢ Pas de majuscules pour keywords = MAX 6/10
        ‚Ä¢ Alias non explicites (a,b,c) = MAX 5/10
        ‚Ä¢ Requ√™tes sur une ligne = MAX 5/10
        ‚Ä¢ Pas d'indentation = MAX 6/10
      SQL_RULES

    else
      "Applique les standards de s√©curit√©, performance et lisibilit√© g√©n√©riques du langage."
    end
  end

  def get_edge_cases_rules
    <<~EDGE_CASES
    CAS PARTICULIERS OBLIGATOIRES :

    üìù CODE VIDE/INVALIDE :
    ‚Ä¢ Code < 5 lignes significatives : MAX 4/10 global
    ‚Ä¢ Syntaxe incorrecte : 1/10 partout + mention explicite
    ‚Ä¢ Code comment√© uniquement : "Code insuffisant pour analyse"

    üîÑ CODE PARFAIT :
    ‚Ä¢ Si vraiment aucun d√©faut : Score global peut √™tre 9-10/10
    ‚Ä¢ MAIS exige justification d√©taill√©e de chaque 9-10/10
    ‚Ä¢ Rare : <5% des codes sont vraiment parfaits

    üìä CALCUL MOYENNE :
    ‚Ä¢ TOUJOURS calculer (S√©curit√© + Performance + Lisibilit√© + Tests) / 4
    ‚Ä¢ Arrondir √† l'entier le plus proche
    ‚Ä¢ Si faille critique s√©curit√© (1-3/10) : Score global MAX 4/10

    üîß CORRECTION :
    ‚Ä¢ Si score global < 7/10 : Correction OBLIGATOIRE compl√®te
    ‚Ä¢ Si score ‚â• 7/10 : Corrections mineures ou "Code satisfaisant"
    ‚Ä¢ JAMAIS de copie identique du code original
    EDGE_CASES
  end

  def get_language_detection_rules
    <<~DETECTION
    D√âTECTION INCOH√âRENCE LANGAGE/CODE :

    üö® SIGNES D'INCOH√âRENCE :
    ‚Ä¢ S√©lection "Ruby" mais code avec #include, cout, cin ‚Üí C++
    ‚Ä¢ S√©lection "Python" mais code avec var, function() ‚Üí JavaScript
    ‚Ä¢ S√©lection "JavaScript" mais code avec def, puts ‚Üí Ruby/Python
    ‚Ä¢ S√©lection "Java" mais code avec #include ‚Üí C++

    üìã ACTION SI INCOH√âRENCE :
    ‚Ä¢ Commencer l'analyse par : "‚ö†Ô∏è ATTENTION : Code d√©tect√© comme [VRAI_LANGAGE] mais [LANGAGE_S√âLECTIONN√â] s√©lectionn√©"
    ‚Ä¢ Analyser selon le VRAI langage du code
    ‚Ä¢ Adapter les crit√®res de s√©curit√©/performance au bon langage
    ‚Ä¢ Mentionner l'erreur dans le r√©sum√© global
    DETECTION
  end
end
