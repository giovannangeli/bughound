require "openai"

class AnalysesController < ApplicationController
  def index
    if params[:language].present?
      @analyses = Analysis.where(language: params[:language]).order(created_at: :desc)
    else
      @analyses = Analysis.all.order(created_at: :desc)
    end

    @languages = Analysis.distinct.pluck(:language).compact.sort
  end

  def new
    @analysis = Analysis.new
  end

def create
  @analysis = Analysis.new(analysis_params)

  if @analysis.save
    # R√©cup√®re le provider choisi
    ai_provider = params[:ai_provider] || "openai"

    # AJOUT DEBUG
    Rails.logger.debug "=== AI PROVIDER CHOISI ==="
    Rails.logger.debug "ai_provider: #{ai_provider}"
    Rails.logger.debug "params[:ai_provider]: #{params[:ai_provider]}"

    # Appelle la bonne API
    response = case ai_provider
when "claude"
  send_to_claude(@analysis.language, @analysis.code)
when "tests"
  generate_tests(@analysis.language, @analysis.code)
when "improve"
  improve_code(@analysis.language, @analysis.code)
else
  send_to_openai(@analysis.language, @analysis.code)
end

    @analysis.update(ai_feedback: response, ai_provider: ai_provider)
    redirect_to @analysis
  else
    render :new
  end
end

  def show
    @analysis = Analysis.find(params[:id])

    # Debug pour identifier les probl√®mes de parsing
    Rails.logger.debug "=== DEBUGGING SCORES ==="
    Rails.logger.debug "AI Feedback: #{@analysis.ai_feedback}"

    # Protection contre ai_feedback nil
    if @analysis.ai_feedback.blank?
      @score = nil
      @scores = {}
      Rails.logger.debug "AI Feedback est vide ou nil"
      return
    end

    # Score global - regex ultra-pr√©cise
    global_match = @analysis.ai_feedback.match(/üìä.*?Score.*?(\d{1,2})\/10/mi)
    @score = global_match ? global_match[1].to_i : nil
    Rails.logger.debug "Score global d√©tect√©: #{@score}"

    # Scores par cat√©gorie avec regex strictes
    @scores = {}

    # S√©curit√©
    security_match = @analysis.ai_feedback.match(/üõ°Ô∏è.*?S√©curit√©.*?(\d{1,2})\/10/mi)
    @scores[:security] = security_match[1].to_i if security_match

    # Performance
    performance_match = @analysis.ai_feedback.match(/‚öôÔ∏è.*?Performance.*?(\d{1,2})\/10/mi)
    @scores[:performance] = performance_match[1].to_i if performance_match

    # Lisibilit√©
    readability_match = @analysis.ai_feedback.match(/üìê.*?Lisibilit√©.*?(\d{1,2})\/10/mi)
    @scores[:readability] = readability_match[1].to_i if readability_match

    # Tests
    testing_match = @analysis.ai_feedback.match(/üß™.*?test.*?(\d{1,2})\/10/mi)
    @scores[:testing] = testing_match[1].to_i if testing_match

    Rails.logger.debug "Scores d√©tect√©s: #{@scores}"
  end

  private

 def analysis_params
  params.require(:analysis).permit(:title, :language, :code, :uploaded_file, :ai_provider)
end

  def send_to_openai(language, code)
    client = OpenAI::Client.new(
      access_token: ENV["OPENAI_API_KEY"],
      uri_base: "https://api.openai.com/v1"
    )

    prompt = build_ultimate_prompt(language, code)

    Rails.logger.debug "=== PROMPT COMPLET ==="
    Rails.logger.debug prompt
    Rails.logger.debug "=== FIN PROMPT ==="

    Rails.logger.debug "=== DEBUG COMPLET ==="
  Rails.logger.debug "Code length: #{code.length} caract√®res"
  Rails.logger.debug "Prompt length: #{prompt.length} caract√®res"
  Rails.logger.debug "Language: #{language}"

    response = client.chat(
      parameters: {
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "Tu es un expert QA senior avec 15 ans d'exp√©rience. Tu analyses le code avec une rigueur professionnelle MAXIMALE. Tu suis EXACTEMENT les bar√®mes donn√©s sans exception."
          },
          { role: "user", content: prompt }
        ],
        temperature: 0.1 # Ultra-bas pour coh√©rence maximale
      }
    )

    response.dig("choices", 0, "message", "content")
  rescue => e
    "Erreur lors de l'appel √† OpenAI : #{e.message}"
  end

  def build_ultimate_prompt(language, code)
    <<~PROMPT
      Tu es un expert QA senior. Analyse ce code #{language} avec rigueur professionnelle.

      BAR√àMES STRICTS :
      ‚Ä¢ S√©curit√© : Failles critiques=1-3/10, Mod√©r√©es=4-6/10, Bonnes pratiques=7-8/10, Exemplaire=9-10/10
      ‚Ä¢ Performance : Catastrophique=1-3/10, Correct=6-7/10, Optimis√©=8-10/10
      ‚Ä¢ Lisibilit√© : Variables a,b,c=MAX 4/10, Code clair=6-7/10, Exemplaire=8-10/10
      ‚Ä¢ Tests : Non testable=1-3/10, Basique=4-6/10, Complet=8-10/10

      SP√âCIFICIT√âS #{language.upcase} :
      #{get_compact_language_rules(language)}

      FORMAT OBLIGATOIRE (RESPECTER EXACTEMENT) :

      üìä Score qualit√© globale : X/10
      [Justification courte]

      üßæ R√©sum√© global :
      [2-3 phrases sur l'objectif et structure]

      üõ°Ô∏è S√©curit√© : X/10
      [Probl√®mes d√©tect√©s + justification]

      ‚öôÔ∏è Performance : X/10
      [Analyse performance + justification]

      üìê Lisibilit√© et qualit√© du code : X/10
      [Conventions, nommage + justification]

      üß™ Recommandations de tests : X/10
      [Tests manquants + justification]

      üîß Proposition de correction :
      [Code am√©lior√© OU "Code satisfaisant"]

      CODE :
      ```#{language.downcase}
      #{code}
      ```

      CONTRAINTES ABSOLUES :
      - TOUS les scores doivent √™tre des NOMBRES ENTIERS (1, 2, 3... 10)
      - JAMAIS de d√©cimales (8.75, 7.5, etc.)
      - Score global = moyenne arrondie des 4 cat√©gories
      - Exemple : (10+7+9+9)/4 = 8.75 ‚Üí Score global = 9/10
    PROMPT
  end

def send_to_claude(language, code)
  client = Anthropic::Client.new

  prompt = build_ultimate_prompt(language, code)

  Rails.logger.debug "=== CLAUDE PROMPT ==="
  Rails.logger.debug prompt
  Rails.logger.debug "=== FIN CLAUDE ==="

  response = client.messages.create(
    model: "claude-3-5-sonnet-20241022",
    max_tokens: 2000,
    messages: [
      {
        role: "user",
        content: prompt
      }
    ]
  )

  response.content[0].text
rescue => e
  "Erreur lors de l'appel √† Claude : #{e.message}"
end

def generate_tests(language, code)
  client = Anthropic::Client.new

  prompt = build_tests_prompt(language, code)

  Rails.logger.debug "=== TESTS PROMPT ==="
  Rails.logger.debug prompt
  Rails.logger.debug "=== FIN TESTS ==="

  response = client.messages.create(
    model: "claude-3-5-sonnet-20241022",
    max_tokens: 2000,
    messages: [
      {
        role: "user",
        content: prompt
      }
    ]
  )

  response.content[0].text
rescue => e
  "Erreur lors de la g√©n√©ration de tests : #{e.message}"
end

def improve_code(language, code)
  client = Anthropic::Client.new

  prompt = build_improve_prompt(language, code)

  Rails.logger.debug "=== IMPROVE PROMPT ==="
  Rails.logger.debug prompt
  Rails.logger.debug "=== FIN IMPROVE ==="

  response = client.messages.create(
    model: "claude-3-5-sonnet-20241022",
    max_tokens: 2000,
    messages: [
      {
        role: "user",
        content: prompt
      }
    ]
  )

  response.content[0].text
rescue => e
  "Erreur lors de l'am√©lioration : #{e.message}"
end

  def get_compact_language_rules(language)
    case language.downcase.strip
    when "ruby"
      "Injection SQL, mass assignment, XSS=1-3/10. N+1 queries=3/10. Variables explicites requis. Snake_case obligatoire."
    when "python"
      "eval(), pickle, os.system=1-3/10. PEP8 obligatoire. Type hints recommand√©s. Docstrings requis."
    when "javascript", "js"
      "innerHTML sans validation, eval()=1-3/10. const/let vs var. Async/await recommand√©."
    when "c++"
      "Buffer overflow, memory leaks=1-3/10. RAII, smart pointers requis. Const correctness."
    when "sql"
      "Injection SQL=1-3/10. INDEX manquants=3/10. SELECT * √©vit√©. Requ√™tes structur√©es."
    else
      "Standards g√©n√©riques du langage. S√©curit√©, performance, lisibilit√©."
    end
  end

  def build_tests_prompt(language, code)
  test_framework = get_test_framework(language)

  <<~PROMPT
    Tu es un expert en tests automatis√©s. G√©n√®re des tests unitaires complets et pr√™ts √† l'emploi.

    FRAMEWORK REQUIS : #{test_framework}

    TESTS √Ä G√âN√âRER :
    ‚Ä¢ Test de fonctionnement normal (happy path)
    ‚Ä¢ Tests des cas limites (edge cases)
    ‚Ä¢ Tests de validation des entr√©es
    ‚Ä¢ Tests de gestion d'erreurs
    ‚Ä¢ Tests de s√©curit√© si pertinent

    FORMAT OBLIGATOIRE :

    üìã Tests g√©n√©r√©s automatiquement

    üß™ Framework : #{test_framework}

    üéØ Sc√©narios test√©s :
    [Liste des 4-5 sc√©narios couverts]

    üíª Code des tests :
    ```#{language.downcase}
    [Code complet des tests, pr√™t √† copier-coller]
    ```

    üìö Instructions d'ex√©cution :
    [Commandes pour lancer les tests]

    CODE √Ä TESTER :
    ```#{language.downcase}
    #{code}
    ```

    IMPORTANT :
    - Tests 100% fonctionnels et ex√©cutables
    - Couverture compl√®te des cas d'usage
    - Noms de tests explicites
    - Commentaires pour chaque test
  PROMPT
end

def get_test_framework(language)
  case language.downcase.strip
  when "ruby"
    "RSpec"
  when "python"
    "pytest"
  when "javascript", "js"
    "Jest"
  when "java"
    "JUnit 5"
  when "c++"
    "Google Test"
  when "php"
    "PHPUnit"
  else
    "Framework de test standard pour #{language}"
  end
end

def build_improve_prompt(language, code)
  best_practices = get_improvement_rules(language)

  <<~PROMPT
    Tu es un expert senior en refactoring et am√©lioration de code. Am√©liore ce code selon les meilleures pratiques.

    AM√âLIORATIONS √Ä APPLIQUER :
    #{best_practices}

    OBJECTIFS PRIORITAIRES :
    ‚Ä¢ S√©curit√© : Corriger toutes les failles d√©tect√©es
    ‚Ä¢ Performance : Optimiser les algorithmes et structures
    ‚Ä¢ Lisibilit√© : Noms explicites, structure claire
    ‚Ä¢ Maintenabilit√© : Documentation, gestion d'erreurs
    ‚Ä¢ Best practices : Standards du langage #{language}

    FORMAT OBLIGATOIRE :

    ‚ú® Code am√©lior√© automatiquement

    üéØ Am√©liorations apport√©es :
    [Liste des 4-6 am√©liorations principales]

    üíª Code refactoris√© :
    ```#{language.downcase}
    [Code complet am√©lior√©, pr√™t √† utiliser]
    ```

    üìù Explications d√©taill√©es :
    [Justification de chaque am√©lioration majeure]

    üöÄ B√©n√©fices obtenus :
    [Impact concret des am√©liorations]

    CODE ORIGINAL :
    ```#{language.downcase}
    #{code}
    ```

    CONTRAINTES :
    - Code 100% fonctionnel et compatible
    - Respect des conventions #{language}
    - Am√©lioration significative de la qualit√©
    - Documentation compl√®te ajout√©e
    - Gestion d'erreurs robuste
  PROMPT
end

def get_improvement_rules(language)
  case language.downcase.strip
  when "ruby"
    "‚Ä¢ S√©curit√© : Param√®tres SQL, validation entr√©es, mass assignment\n‚Ä¢ Performance : √âviter N+1, optimiser boucles\n‚Ä¢ Style : Snake_case, m√©thodes < 30 lignes\n‚Ä¢ Documentation : Commentaires explicites"
  when "python"
    "‚Ä¢ S√©curit√© : √âviter eval(), valider entr√©es\n‚Ä¢ Performance : List comprehensions, g√©n√©rateurs\n‚Ä¢ Style : PEP8, type hints, docstrings\n‚Ä¢ Documentation : Docstrings compl√®tes"
  when "javascript", "js"
    "‚Ä¢ S√©curit√© : Validation XSS, sanitization\n‚Ä¢ Performance : Async/await, √©viter DOM loops\n‚Ä¢ Style : const/let, arrow functions\n‚Ä¢ Documentation : JSDoc compl√®te"
  when "java"
    "‚Ä¢ S√©curit√© : Validation, exceptions\n‚Ä¢ Performance : Streams, collections efficaces\n‚Ä¢ Style : CamelCase, m√©thodes courtes\n‚Ä¢ Documentation : Javadoc"
  else
    "‚Ä¢ S√©curit√© : Validation entr√©es, gestion erreurs\n‚Ä¢ Performance : Optimisation algorithmes\n‚Ä¢ Style : Conventions du langage\n‚Ä¢ Documentation : Commentaires explicites"
  end
end
end
